[{"type_of":"article","id":1059008,"title":"Using Redis Cloud in your NextJS application","description":"Recently, a Youtuber and Javascript influencer FireShip released a tutorial of utilizing Redis...","published":true,"published_at":"2022-04-18T01:10:02.222Z","slug":"using-redis-cloud-in-your-nextjs-application-39f2","path":"/rainforss/using-redis-cloud-in-your-nextjs-application-39f2","url":"https://dev.to/rainforss/using-redis-cloud-in-your-nextjs-application-39f2","comments_count":0,"public_reactions_count":1,"page_views_count":2,"published_timestamp":"2022-04-18T01:10:02Z","body_markdown":"Recently, a Youtuber and Javascript influencer FireShip released a [tutorial](https://www.youtube.com/watch?v=DOIWQddRD5M&t=334s&ab_channel=Fireship) of utilizing Redis Enterprise Cloud as a high speed cloud data storage in a NextJS web application and the tutorial attracted hundreds of thousand of views on the internet. Although I was on the fence about using an in-memory database as the main database for a full-stack application, the Redis Enterprise Cloud service offer - together with a $200 voucher - had me interested enough to try it as a runtime cache of a NextJS application I built for a product demo to York University.\n\n\nArriving at Redis Enterprice Cloud service offering page, I picked the free tier since I was not certain if I would start spending the $200 credit yet. The free service tier - as you would imagine for anything that is free - does not offer a lot: 30MB RAM for 1 dedicated database with **30 maximum concurrent connections**.\n\n\n![Redis Enterprise Cloud pricing](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adqf02q6yhezk66m26l9.PNG \"Redis Enterprise Cloud pricing information\")\n\n\n30 maximum connections may not seem like an issue as long as you are not building an application that has specific requirements for concurrency. This statement could be true if we are establishing connections between a Node server and a Redis cache since it is [recommended that only one or two Redis client would be instantiated then reused](https://github.com/redis/node-redis/issues/558) in the Node server. In this case, there is a limited number of connections ([clients are connections in Redis](https://stackoverflow.com/questions/51517578/how-many-total-connection-or-max-connections-are-available-in-redis-server)) needed when the server is running and communicating with Redis.\n\n\n---\n\n\nHowever, things are very different if you are using Redis Enterprise Cloud in a NextJS application and having your backend services orchestrated using the **Serverless Functions**. If you do not understand the basics of NextJS and Serverless Functions enough, you would encounter this error and never understand the cause of it:\n\n\n> ERR max number of clients reached\n\n\nIf I am only connecting to Redis with one application, how is it possible that all 30 connections are occupied? Let's look at some code before I reveal the answer.\n\n```javascript\nimport { Client, Entity, Schema, Repository } from 'redis-om';\n\nconst client = new Client();\n\nasync function connect() {\n    if (!client.isOpen()) {\n        await client.open(process.env.REDIS_URL);\n    }\n}\n```\n\nThis is a code piece copied from [Fireship's tutorial](https://fireship.io/lessons/redis-nextjs/). It instantiates a Redis client with the help of [\"Redis-OM\"](https://www.npmjs.com/package/redis-om) library and declares a \"connect\" function which can be used to establish a connection between the client and Redis. As the code specifies, the \"connect\" function will only attempt to open a connection if no open connections exist between the client and Redis.\n\n```javascript\nconst client = createClient({ url: process.env.REDIS_URL });\n\nexport const connect = async () => {\n  if (client.isOpen) {\n    console.log(\"Already connected to Redis\");\n    return;\n  }\n\n  await client.connect();\n  console.log(\"Connected successfully.\");\n};\n```\n\nThis is another code piece if the [\"Node-Redis\"](https://www.npmjs.com/package/redis) library is being used. There are slight differences but the logic is the same: open a connection only if there is no existing connection established between the client and Redis.\n\n\nEither piece of code makes sense on paper here: since the code only gets executed once when the application is up and running, only one instance of client is created and the \"connect\" function will create the connection only once no matter how many times it is called, right?\n\n**Wrong**. Remember that NextJS's _Serverless Functions_ and _Edge Functions_ are executed in a **highly dynamic environment** based on resource allocation, meaning the environment where the functions are executed will not be the same as the environment where your NextJS was built and deployed in (e.g. Vercel, Netlify, etc.). Therefore, when you are creating NextJS API routes (these routes are realized by serverless functions if the NextJS app is deployed in Vercel, Netlify or similar platforms) under the /pages/api folder to have them call the \"connect\" function and then interact with data in Redis, it is almost inevitable that every serverless function execution will be in a **different environment** where the connection to Redis has not been opened before. With this setup, each serverless function invocation because of API calls will attempt to create a unique connection to your Redis Cloud database. Theoretically, 30 invocations of serverless functions which try to connect to Redis could exhaust the allowed number of connections for free tier. To make things worse, Redis does not have a default setting for connection timeout so the connections created will be kept alive unless your client-side code does the clean up.\n\n\n_If you are already stranded with Redis Cloud having maximum number of connections, connect to Redis Cloud using RedisInsights and run the `CLIENT KILL TYPE normal` command to evict all the basic connections._\n\n\n---\n\n\nIn a serverless NextJS application setup, it is imperative to always **close the connection** after your code finishes interacting with Redis data. To complete my tutorial, here is an example setup I am using to handle Redis connections and interactions in a NextJS app supported by serverless functions:\n\n\n```javascript\n//Initialize the Redis client in global execution context to ensure uniqueness of the client\nlet client = global.redis;\n\n//If no Redis client is found, create the client using Redis connection string\nif (!client) {\n  client = global.redis = createClient({ url: process.env.REDIS_URL });\n}\n\n//Open connection only when there is no existing connection\nexport const connect = async () => {\n  if (client.isOpen) {\n    console.log(\"Already connected to Redis\");\n    return;\n  }\n\n  await client.connect();\n  console.log(\"Connected successfully.\");\n};\n\n//Close connection only when there is an existing connection\nexport const disconnect = async () => {\n  if (!client.isOpen) {\n    return;\n  }\n  await client.quit();\n  console.log(\"Disconnected.\");\n};\n\n//Retrieve the cached data\nexport const getcache = async () => {\n  const cache = await redis.get(\"cacheBetachSite\");\n  return cache;\n};\n```\n\n\nThe comments are pretty self-explanatory so I will not go into too much details here. If you are wondering how these helper functions are being used in API routes or NextJS SSG/SSR functions, here are two examples:\n\n- NextJS SSG/SSR functions\n\n```javascript\nexport const getStaticProps: GetStaticProps = async () => {\n  try {\n    await connect();\n    const cachedData = await getcache();\n    await disconnect();\n    return {\n      props: {\n        cachedData\n      },\n    };\n  } catch (error: any) {\n    console.log(error.message);\n    return {\n      props: {\n        error,\n      },\n    };\n  }\n};\n```\n\n---\n\n- API routes supported by serverless functions\n\n```javascript\nexport default async function demoRoute(\n  _req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    await connect();\n    const cachedData = await getcache();\n    await disconnect();\n    return res.status(200).json(cachedData);\n  } catch (error: any) {\n    return res.status(500).json({ error: \"Unknown error.\" });\n  }\n}\n```\n\n\n---\n\n\nBeing a part of the IT community, we have the blessing that one can always find tutorials or documentations about a variety of technologies and tools, however, tutorials or documentations might not always fit into each individual's own use case seamlessly. \n\n> Be **adventurous** and **diligent**, always do your own recon before following others' footprints.\n","positive_reactions_count":1,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s---D47cVd_--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptk17czqrmotsb61p146.PNG","tag_list":["javascript","nextjs","tutorial","webdev"],"canonical_url":"https://dev.to/rainforss/using-redis-cloud-in-your-nextjs-application-39f2","reading_time_minutes":5,"user":{"name":"rainforss","username":"rainforss","twitter_username":null,"github_username":"rainforss","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--HAPqqtND--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/848607/a0909109-d0f2-48f1-bf10-96bddcde49b7.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--McXdKOLb--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/848607/a0909109-d0f2-48f1-bf10-96bddcde49b7.png"}},{"type_of":"article","id":1058377,"title":"Is the Power Apps Portal a viable option as your customer facing website?","description":"Microsoft has always been promoting the Power Apps Portal (previously Dynamics Portal) as a \"no-code\"...","published":true,"published_at":"2022-04-17T04:40:03.665Z","slug":"is-the-power-apps-portal-a-viable-option-as-your-customer-facing-website-5316","path":"/rainforss/is-the-power-apps-portal-a-viable-option-as-your-customer-facing-website-5316","url":"https://dev.to/rainforss/is-the-power-apps-portal-a-viable-option-as-your-customer-facing-website-5316","comments_count":0,"public_reactions_count":0,"page_views_count":5,"published_timestamp":"2022-04-17T04:40:03Z","body_markdown":"Microsoft has always been promoting the Power Apps Portal (previously Dynamics Portal) as a \"no-code\" solution for external facing websites.\n\nTogether with the naming change, the pricing model of this Microsoft product has also seen significant changes.\n\nPrior to _1st October 2020_, a customer had to purchase a portal with a flat one-time payment and that pricing model was deemed less profitable since the major clients' portals had very high traffic volume of unauthenticated and authenticated visitors. From 1st October 2020, Microsoft has decided to adopt a **consumption-based** pricing scheme which makes customers pay monthly fees based on the number of page views and login sessions.\n\nThe following screenshot demonstrates the updated consumption-based pricing model:\n\n![Power Apps Portal pricing model](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx68gjuqlh4b7a0mwtat.png \"Price chart of Power Apps Portal\")\n\nIf you found this pricing model confusing (which I did), this [amazing article](https://thehosk.medium.com/understanding-power-portals-pricing-and-how-it-differs-from-dynamics-portals-c1753710e34b) by Ben Hosking gives crystal clear descriptions about the updated pricing model, together with some beneficial background knowledge and thoughts about the portals.\n\nAlthough the pay-as-you-go service model may seem cost-effective for consumers who have lower traffic volume and less registered portal users, bigger customers might not enjoy this change since they were always paying the same amount __regardless of the amount of traffic__ hitting the portal. To make the situation even worse, there are some caveats that portal owners are required to pay at the __beginning of the month__ and the purchased consumption amount (pageviews and logins) __DOES NOT__ roll over to the next month if not used up.\n\nLet's consider the following scenario to understand the grievance your customers might potentially have: A university is using a Power Apps Portal to manage student/staff/alumni logins and the IT department is managing the portal monthly payment based on the averaged number of logins per month. The employment center of the university is holding a career fair in the coming month which will result in a huge influx of authenticated users. However, not knowing the pricing model of Power App Portals, the employment center does not notify the IT department of the event and the greatly increased amount of logins would cause service disruptions of the portal. Furthermore, assuming the employment center learnt a lesson and notified IT department to increase the purchased amount of logins, there could be instances where the actual logins are way under the anticipated amount. With the purchased quota not being able to roll over, this would potentially result in thousands of purchased logins in vain.\n\nThe __key takeaway__ of the previous example is that a customer can experience difficulties determine the proper amount of logins/pageviews and that can lead to either unforseeable service disruptions or wasted budgets. While this issue might not be as severe for bigger organizations since they could work with statistical data to make a decision on a payment plan and there is more expenditure budgetd, medium to small sized customers would find it hard to manage the __traffic fluctuation__.\n\nThere are many other scenarios we can examine to understand the concerns of choosing Power Apps Portal as your solution but I would leave that to future posts. I will quickly summarize my considerations and thoughts of features offered by Power Apps Portal in this article as follows:\n\n* **Low-code or no-code solution to configure a website**\n\nThis could either be a curse or blessing based on different situations. With the low-code or no-code solution, one can quickly start a \"okay\" public facing website using templates and basic configurations without much technical aptitude. Here is a basic demo portal landing page:\n\n\n![A basic portal configured with low-code solution](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69v4nzs702wgit6lqxvb.png \"Power Apps Portal created with templates and basic configurations\")\n\n__However__, if more interactions are desired to make the website \"lively\" (see a \"lively\" [custom coded website](https://personal-site-mocha-pi.vercel.app/) and a [Power Apps Portal](https://north52.microsoftcrmportals.com/) configured by North52 professionals), the use of HTML/CSS/Javascript coding is inevitable. Now you are facing a [condumdrum](https://dictionary.cambridge.org/dictionary/english/conundrum) of getting a developer to add custom code to a low-code/no-code platform which he/she likely has very little idea about (unless you can find a technical person who is proficient at both coding and Dynamics 365).\n\n---\n\n* **Microsoft takes care of the scaling aspect of Power Apps Portal**\n\nScalability is a bitter-sweet problem to have (meaning that you are getting more traffic on your web application) and most of the organizations do not have the luxury or opportunity to ever have to worry about this problem. Moreover, the majority of public facing content is usually static (meaning it is likely to be stale for a long period of time) and this type of content can be cached to [content-delivery networks](https://www.cloudflare.com/en-ca/learning/cdn/what-is-a-cdn/) (CDN), rendering the scalability unnecessary since the content is not served directly by web server when requested.\n\nOf course there are way more aspects to look into but to summarize, the auto-scaling feature can certainly benefit large organizations while other organizations probably wouldn't make use of the feature at all.\n\n---\n\n* **Power Apps Portal can have a sophisticated security hierachy to manage different level of access.**\n\nAgain, having a nested security configuration can bring in benefits or hassles based on the complexity of content you have on the external facing website. For the customers that I have previously worked with, only the large scale organizations are utilizing a complicated security role configuration while the relatively smaller ones only have two security levels - authenticated and unauthenticated.\n\nTherefore, it is likely that you will be paying for features that are rarely used if you are a small to medium sized customer making use of Power Apps Portal.\n\n---\n\n* **Power Apps Portal is using a pay-as-you-go pricing model.**\n\nBased on the pricing model, the monthly cost to larger companies who have high traffic volume to the portals could be high and the cost will add up over time. However, these companies have higher budget than others so they can enjor all the benefits offered by Power Apps Portal while not being too concerned about the cost.\n \nFrom the perspective of companies which do not have a good amount of visitors on external facing website, the monthly cost could look promising if we are aiming for under 100 logins and 100,000 pageviews per month. Does it mean that Power Apps Portal is a better choice than having some developers code a web application with integration to Dynamics 365? The answer is not definite.\n\nYou might be asking, \"what's the catch?\" Firstly, you definitely need to spend thousands if you are trying to have developers develop your website but the website's monthly cost will be much lower comparing to Power Apps Portal's. This means that a custom built website could still be the winner if we are talking about a long run. Secondly, moving away from Power Apps Portal once you are onboard will be a gruesome task because you have no access to the source code of Power Apps Portal.\n\n---\n\nThere are way more features to be discussed but I will stop here for the sake of reader's sanity. I will potentially address more considerations about other features in the future.\n\nIn conclusion, I am not depicting a bad image of Power Apps Portal though it might seem that I am questioning certain aspects of Power Apps Portal. It is actually a solid product offering in the marketing when compared to other competitors such as Salesforce Portals. Nonetheless, this type of product offering might or might not be the optimal solution for everyone who is seeking an established public facing web application. Make your decision after careful considerations.\n\nI sincerely hope that you would find this article inspiring or intuitive (at least part of it). I am happy to answer any questions in the comment or have some more discussions :)\n\n---\n\n_So what would be a better solution if a web application which can securely surface data from Dynamics 365 environment (DataVerse) is desired? I will have this covered in another post, stay tuned._\n\n#### The solution stack consists of NextJS, Vercel Serverless Functions, Redis Cloud and Dynamics 365 Web APIs.\n\n\n![Custom portal with authentication and integration to Dynamics 365](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87jvaim7w26g1ro3xr3r.jpg \"Custom portal for higher education\")\n","positive_reactions_count":0,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--V5dkODi9--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niybsggrkr06kju8417w.png","tag_list":["dynamics365"],"canonical_url":"https://dev.to/rainforss/is-the-power-apps-portal-a-viable-option-as-your-customer-facing-website-5316","reading_time_minutes":6,"user":{"name":"rainforss","username":"rainforss","twitter_username":null,"github_username":"rainforss","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--HAPqqtND--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/848607/a0909109-d0f2-48f1-bf10-96bddcde49b7.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--McXdKOLb--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/848607/a0909109-d0f2-48f1-bf10-96bddcde49b7.png"}},{"type_of":"article","id":1058141,"title":"Is the Power Apps Portal a viable option as your customer facing website?","description":"Microsoft has always been promoting the Power Apps Portal (previously Dynamics Portal) as a \"no-code\"...","published":true,"published_at":"2022-04-16T20:20:42.514Z","slug":"test-4h3k","path":"/rainforss/test-4h3k","url":"https://dev.to/rainforss/test-4h3k","comments_count":0,"public_reactions_count":7,"page_views_count":46,"published_timestamp":"2022-04-16T20:20:42Z","body_markdown":"Microsoft has always been promoting the Power Apps Portal (previously Dynamics Portal) as a \"no-code\" solution for external facing websites.\n\nTogether with the naming change, the pricing model of this Microsoft product has also seen significant changes.\n\nPrior to _1st October 2020_, a customer had to purchase a portal with a flat one-time payment and that pricing model was deemed less profitable since the major clients' portals had very high traffic volume of unauthenticated and authenticated visitors. From 1st October 2020, Microsoft has decided to adopt a **consumption-based** pricing scheme which makes customers pay monthly fees based on the number of page views and login sessions.\n\nThe following screenshot demonstrates the updated consumption-based pricing model:\n\n![Power Apps Portal pricing model](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx68gjuqlh4b7a0mwtat.png \"Price chart of Power Apps Portal\")\n\nIf you found this pricing model confusing (which I did), this [amazing article](https://thehosk.medium.com/understanding-power-portals-pricing-and-how-it-differs-from-dynamics-portals-c1753710e34b) by Ben Hosking gives crystal clear descriptions about the updated pricing model, together with some beneficial background knowledge and thoughts about the portals.\n\nAlthough the pay-as-you-go service model may seem cost-effective for consumers who have lower traffic volume and less registered portal users, bigger customers might not enjoy this change since they were always paying the same amount __regardless of the amount of traffic__ hitting the portal. To make the situation even worse, there are some caveats that portal owners are required to pay at the __beginning of the month__ and the purchased consumption amount (pageviews and logins) __DOES NOT__ roll over to the next month if not used up.\n\nLet's consider the following scenario to understand the grievance your customers might potentially have: A university is using a Power Apps Portal to manage student/staff/alumni logins and the IT department is managing the portal monthly payment based on the averaged number of logins per month. The employment center of the university is holding a career fair in the coming month which will result in a huge influx of authenticated users. However, not knowing the pricing model of Power App Portals, the employment center does not notify the IT department of the event and the greatly increased amount of logins would cause service disruptions of the portal. Furthermore, assuming the employment center learnt a lesson and notified IT department to increase the purchased amount of logins, there could be instances where the actual logins are way under the anticipated amount. With the purchased quota not being able to roll over, this would potentially result in thousands of purchased logins in vain.\n\nThe __key takeaway__ of the previous example is that a customer can experience difficulties determine the proper amount of logins/pageviews and that can lead to either unforseeable service disruptions or wasted budgets. While this issue might not be as severe for bigger organizations since they could work with statistical data to make a decision on a payment plan and there is more expenditure budgetd, medium to small sized customers would find it hard to manage the __traffic fluctuation__.\n\nThere are many other scenarios we can examine to understand the concerns of choosing Power Apps Portal as your solution but I would leave that to future posts. I will quickly summarize my considerations and thoughts of features offered by Power Apps Portal in this article as follows:\n\n* **Low-code or no-code solution to configure a website**\n\nThis could either be a curse or blessing based on different situations. With the low-code or no-code solution, one can quickly start a \"okay\" public facing website using templates and basic configurations without much technical aptitude. Here is a basic demo portal landing page:\n\n\n![A basic portal configured with low-code solution](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69v4nzs702wgit6lqxvb.png \"Power Apps Portal created with templates and basic configurations\")\n\n__However__, if more interactions are desired to make the website \"lively\" (see a \"lively\" [custom coded website](https://personal-site-mocha-pi.vercel.app/) and a [Power Apps Portal](https://north52.microsoftcrmportals.com/) configured by North52 professionals), the use of HTML/CSS/Javascript coding is inevitable. Now you are facing a [condumdrum](https://dictionary.cambridge.org/dictionary/english/conundrum) of getting a developer to add custom code to a low-code/no-code platform which he/she likely has very little idea about (unless you can find a technical person who is proficient at both coding and Dynamics 365).\n\n\n\n---\n\n\n\n* **Microsoft takes care of the scaling aspect of Power Apps Portal**\n\nScalability is a bitter-sweet problem to have (meaning that you are getting more traffic on your web application) and most of the organizations do not have the luxury or opportunity to ever have to worry about this problem. Moreover, the majority of public facing content is usually static (meaning it is likely to be stale for a long period of time) and this type of content can be cached to [content-delivery networks](https://www.cloudflare.com/en-ca/learning/cdn/what-is-a-cdn/) (CDN), rendering the scalability unnecessary since the content is not served directly by web server when requested.\n\nOf course there are way more aspects to look into but to summarize, the auto-scaling feature can certainly benefit large organizations while other organizations probably wouldn't make use of the feature at all.\n\n\n\n---\n\n\n\n* **Power Apps Portal can have a sophisticated security hierachy to manage different level of access.**\n\nAgain, having a nested security configuration can bring in benefits or hassles based on the complexity of content you have on the external facing website. For the customers that I have previously worked with, only the large scale organizations are utilizing a complicated security role configuration while the relatively smaller ones only have two security levels - authenticated and unauthenticated.\n\nTherefore, it is likely that you will be paying for features that are rarely used if you are a small to medium sized customer making use of Power Apps Portal.\n\n\n\n---\n\n\n\n* **Power Apps Portal is using a pay-as-you-go pricing model.**\n\nBased on the pricing model, the monthly cost to larger companies who have high traffic volume to the portals could be high and the cost will add up over time. However, these companies have higher budget than others so they can enjor all the benefits offered by Power Apps Portal while not being too concerned about the cost.\n \nFrom the perspective of companies which do not have a good amount of visitors on external facing website, the monthly cost could look promising if we are aiming for under 100 logins and 100,000 pageviews per month. Does it mean that Power Apps Portal is a better choice than having some developers code a web application with integration to Dynamics 365? The answer is not definite.\n\nYou might be asking, \"what's the catch?\" Firstly, you definitely need to spend thousands if you are trying to have developers develop your website but the website's monthly cost will be much lower comparing to Power Apps Portal's. This means that a custom built website could still be the winner if we are talking about a long run. Secondly, moving away from Power Apps Portal once you are onboard will be a gruesome task because you have no access to the source code of Power Apps Portal.\n\n\n\n---\n\n\n\nThere are way more features to be discussed but I will stop here for the sake of reader's sanity. I will potentially address more considerations about other features in the future.\n\nIn conclusion, I am not depicting a bad image of Power Apps Portal though it might seem that I am questioning certain aspects of Power Apps Portal. It is actually a solid product offering in the marketing when compared to other competitors such as Salesforce Portals. Nonetheless, this type of product offering might or might not be the optimal solution for everyone who is seeking an established public facing web application. Make your decision after careful considerations.\n\nI sincerely hope that you would find this article inspiring or intuitive (at least part of it). I am happy to answer any questions in the comment or have some more discussions :)\n\n\n\n---\n\n\n\n_So what would be a better solution if a web application which can securely surface data from Dynamics 365 environment (DataVerse) is desired? I will have this covered in another post, stay tuned._\n\n\n\n#### The solution stack consists of NextJS, Vercel Serverless Functions, Redis Cloud and Dynamics 365 Web APIs.\n\n\n![Custom portal with authentication and integration to Dynamics 365](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87jvaim7w26g1ro3xr3r.jpg \"Custom portal for higher education\")\n\n","positive_reactions_count":7,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--nJERkf7g--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhnndk1myntzbch4vay1.png","tag_list":["dynamics365","portal","powerapps"],"canonical_url":"https://dev.to/rainforss/test-4h3k","reading_time_minutes":6,"user":{"name":"rainforss","username":"rainforss","twitter_username":null,"github_username":"rainforss","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--HAPqqtND--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/848607/a0909109-d0f2-48f1-bf10-96bddcde49b7.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--McXdKOLb--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/848607/a0909109-d0f2-48f1-bf10-96bddcde49b7.png"}}]